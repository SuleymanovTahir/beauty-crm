    #!/usr/bin/env python3
    # backend/migrate_bot_settings.py

import sqlite3
import os
import re
from datetime import datetime
DATABASE_NAME = os.getenv("DATABASE_NAME", "salon_bot.db")
INSTRUCTIONS_FILE = "bot/bot_instructions_file.txt"
# ===== –î–ï–§–û–õ–¢–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø =====
DEFAULT_SETTINGS = {
    "bot_name": "M.Le Diamant Assistant",
    "salon_name": "M.Le Diamant Beauty Lounge",
    "salon_address": "Shop 13, Amwaj 3 Plaza Level, JBR, Dubai",
    "salon_phone": "+971 50 123 4567",
    "salon_hours": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ 10:30 - 21:00",
    "booking_url": "https://n1234567.yclients.com",
    "google_maps_link": "https://maps.app.goo.gl/Puh5X1bNEjWPiToz6",
    "personality_traits": "–û–±–∞—è—Ç–µ–ª—å–Ω–∞—è, —É–≤–µ—Ä–µ–Ω–Ω–∞—è, —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω–∞—è",
    "greeting_message": "–ü—Ä–∏–≤–µ—Ç! üòä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
    "farewell_message": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–∑–∏—Ç! üíñ",
    "price_explanation": "–ú—ã –≤ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç–µ üíé",
    "communication_style": "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π",
    "max_message_length": 4,
    "emoji_usage": "–£–º–µ—Ä–µ–Ω–Ω–æ–µ (2-3 –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)",
    "languages_supported": "ru,en,ar",
}
def parse_section(content: str, section_name: str, next_section: str = None) -> str:
    """–ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏"""
    try:
        start = content.find(f'[{section_name}]')
        if start == -1:
            start = content.find(section_name)
        if start == -1:
            return ""
        
        if next_section:
            end = content.find(f'[{next_section}]', start)
            if end == -1:
                end = content.find(next_section, start)
        else:
            end = len(content)
        
        if end == -1:
            end = len(content)
        
        return content[start:end].strip()
    except:
        return ""
def extract_quotes(text: str) -> list:
    """–ò–∑–≤–ª–µ—á—å —Ñ—Ä–∞–∑—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö"""
    return re.findall(r'"([^"]*)"', text)
def extract_objection(content: str, objection_keyword: str) -> str:
    """–ò–∑–≤–ª–µ—á—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞"""
    
    # –ò—â–µ–º –±–ª–æ–∫ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
    pattern = rf'\*\*–í–û–ó–†–ê–ñ–ï–ù–ò–ï.*?{re.escape(objection_keyword)}.*?\*\*'
    match = re.search(pattern, content, re.DOTALL | re.IGNORECASE)
    
    if not match:
        return ""
    
    # –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–∫–∞—Ç—å –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
    start_pos = match.end()
    
    # –ò—â–µ–º "‚úÖ –ì–ï–ù–ò–ê–õ–¨–ù–û:" –ø–æ—Å–ª–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
    genius_pattern = r'‚úÖ\s*–ì–ï–ù–ò–ê–õ–¨–ù–û:\s*\n'
    genius_match = re.search(genius_pattern, content[start_pos:])
    
    if not genius_match:
        return ""
    
    # –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ - —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ "‚úÖ –ì–ï–ù–ò–ê–õ–¨–ù–û:"
    answer_start = start_pos + genius_match.end()
    
    # –ö–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ - –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ "**–í–û–ó–†–ê–ñ–ï–ù–ò–ï" –∏–ª–∏ "---"
    rest_content = content[answer_start:]
    
    # –ò—â–µ–º –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞
    end_patterns = [
        r'\n\n\*\*–í–û–ó–†–ê–ñ–ï–ù–ò–ï',  # –°–ª–µ–¥—É—é—â–µ–µ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏–µ
        r'\n---',                 # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        r'\n\n\[',                # –ù–æ–≤–∞—è —Å–µ–∫—Ü–∏—è
        r'\n\n#',                 # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    ]
    
    end_pos = len(rest_content)
    for pattern in end_patterns:
        match = re.search(pattern, rest_content)
        if match and match.start() < end_pos:
            end_pos = match.start()
    
    response = rest_content[:end_pos].strip()
    
    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    lines = []
    for line in response.split('\n'):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        if line.strip().startswith('‚úÖ –ì–ï–ù–ò–ê–õ–¨–ù–û:'):
            continue
        if line.strip().startswith('‚ùå'):
            continue
        if line.strip().startswith('**–í–û–ó–†–ê–ñ–ï–ù–ò–ï'):
            break
        lines.append(line)
    
    response = '\n'.join(lines).strip()
    
    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
    if len(response) > 1000:
        response = response[:997] + '...'
    
    return response
def parse_instructions_file() -> dict:
    """–ü–û–õ–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞"""
    
    if not os.path.exists(INSTRUCTIONS_FILE):
        print(f"‚ö†Ô∏è  –§–∞–π–ª {INSTRUCTIONS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return DEFAULT_SETTINGS.copy()
    
    print(f"üìñ –ß–∏—Ç–∞—é {INSTRUCTIONS_FILE}...")
    
    with open(INSTRUCTIONS_FILE, 'r', encoding='utf-8') as f:
        content = f.read()
    
    settings = DEFAULT_SETTINGS.copy()
    
    # === –õ–ò–ß–ù–û–°–¢–¨ ===
    personality_section = parse_section(content, '–õ–ò–ß–ù–û–°–¢–¨ –ë–û–¢–ê', '–ü–†–ê–í–ò–õ–ê –û –ü–†–ò–í–ï–¢–°–¢–í–ò–ò')
    if personality_section:
        traits = []
        for line in personality_section.split('\n'):
            line = line.strip()
            if (line.startswith('- ') or line.startswith('‚Ä¢ ')) and len(line) > 3:
                traits.append(line[2:])
        if traits:
            settings['personality_traits'] = '\n'.join(traits[:10])
    
    # === –ü–†–ò–í–ï–¢–°–¢–í–ò–ï ===
    greeting_section = parse_section(content, '–ü–†–ê–í–ò–õ–ê –û –ü–†–ò–í–ï–¢–°–¢–í–ò–ò', '–ü–†–ê–í–ò–õ–ê –û –¶–ï–ù–ê–•')
    greeting_quotes = extract_quotes(greeting_section)
    for quote in greeting_quotes:
        if '–ü—Ä–∏–≤–µ—Ç' in quote or 'Hello' in quote:
            settings['greeting_message'] = quote
            break
    
    # === –ü–†–û–©–ê–ù–ò–ï ===
    if '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–∑–∏—Ç' in content:
        farewell_match = re.search(r'(–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∏–∑–∏—Ç[^"\n]{0,100})', content)
        if farewell_match:
            settings['farewell_message'] = farewell_match.group(1).strip()
    
    # === –¶–ï–ù–´ ===
    pricing_section = parse_section(content, '–ü–†–ê–í–ò–õ–ê –û –¶–ï–ù–ê–•', '–ü–†–ê–í–ò–õ–ê –û –ó–ê–ü–ò–°–ò')
    if pricing_section:
        settings['price_explanation'] = '–ú—ã –≤ –ø—Ä–µ–º–∏—É–º-—Å–µ–≥–º–µ–Ω—Ç–µ üíé\n–ù–∞—à–∏ —Ü–µ–Ω—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –∫–∞—á–µ—Å—Ç–≤–æ.'
        
        # Price response template
        if '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞' in pricing_section:
            settings['price_response_template'] = '{SERVICE} - {PRICE} {CURRENCY} üíé\n\n–í–∫–ª—é—á–∞–µ—Ç: {BENEFITS}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {DURATION}\n\n{EMOTIONAL_HOOK}'
        
        # Premium justification
        premium_quotes = extract_quotes(pricing_section)
        for quote in premium_quotes:
            if '–ø—Ä–µ–º–∏—É–º' in quote and len(quote) > 100:
                settings['premium_justification'] = quote
                break
    
    # === –ó–ê–ü–ò–°–¨ ===
    booking_section = parse_section(content, '–ü–†–ê–í–ò–õ–ê –û –ó–ê–ü–ò–°–ò', '–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ê–õ–û–ù–ï')
    booking_quotes = extract_quotes(booking_section)
    for quote in booking_quotes:
        if 'AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç' in quote and '–∑–∞–ø–∏—Å—å' in quote:
            settings['booking_redirect_message'] = quote
            break
    
    # === FOMO ===
    fomo_section = parse_section(content, 'FOMO –¢–ï–•–ù–ò–ö–ò', 'UPSELL')
    fomo_messages = []
    for line in fomo_section.split('\n'):
        if 'üî•' in line:
            msg = line.strip().lstrip('üî• ').strip('"')
            if msg and len(msg) > 10:
                fomo_messages.append(msg)
    if fomo_messages:
        settings['fomo_messages'] = '|'.join(fomo_messages)
    
    # === UPSELL ===
    upsell_section = parse_section(content, 'UPSELL –¢–ï–•–ù–ò–ö–ò', '–°–û–¶–ò–ê–õ–¨–ù–û–ï')
    upsell_quotes = extract_quotes(upsell_section)
    if upsell_quotes:
        settings['upsell_techniques'] = '|'.join(upsell_quotes[:5])
    
    # === –°–¢–ò–õ–¨ ===
    comm_section = parse_section(content, '–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø', '–Ø–ó–´–ö–û–í–ê–Ø')
    if comm_section:
        style_parts = []
        for line in comm_section.split('\n'):
            if '**' in line and ':' in line:
                style_parts.append(line.strip().replace('**', ''))
        if style_parts:
            settings['communication_style'] = '\n'.join(style_parts)
    
    # === –í–û–ó–†–ê–ñ–ï–ù–ò–Ø (–î–ï–¢–ê–õ–¨–ù–û) ===
    settings['objection_expensive'] = extract_objection(content, '–î–æ—Ä–æ–≥–æ')
    settings['objection_think_about_it'] = extract_objection(content, '–ü–æ–¥—É–º–∞—é')
    settings['objection_no_time'] = extract_objection(content, '–ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏')
    settings['objection_pain'] = extract_objection(content, '–±–æ–ª–∏')
    settings['objection_result_doubt'] = extract_objection(content, '–Ω–µ —É–≤–µ—Ä–µ–Ω')
    settings['objection_cheaper_elsewhere'] = extract_objection(content, '–¥–µ—à–µ–≤–ª–µ')
    settings['objection_too_far'] = extract_objection(content, '–¥–∞–ª–µ–∫–æ')
    settings['objection_consult_husband'] = extract_objection(content, '–º—É–∂–µ–º')
    settings['objection_first_time'] = extract_objection(content, '–ø–µ—Ä–≤—ã–π —Ä–∞–∑')
    settings['objection_not_happy'] = extract_objection(content, '–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è')
    
    # === –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´ ===
    triggers_section = parse_section(content, '–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´', '–°–û–¶–ò–ê–õ–¨–ù–û–ï')
    if triggers_section:
        triggers = []
        for line in triggers_section.split('\n'):
            if 'üíñ' in line or '‚è∞' in line or 'üí∞' in line:
                triggers.append(line.strip())
        if triggers:
            settings['emotional_triggers'] = '\n'.join(triggers)
    
    # === –°–û–¶–ò–ê–õ–¨–ù–û–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û ===
    social_section = parse_section(content, '–°–û–¶–ò–ê–õ–¨–ù–û–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–û', '–ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø')
    if social_section:
        proofs = []
        for line in social_section.split('\n'):
            if line.strip().startswith('‚úÖ'):
                proofs.append(line.strip())
        if proofs:
            settings['social_proof_phrases'] = '\n'.join(proofs)
    
    # === –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø ===
    person_section = parse_section(content, '–ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø', '–†–ê–ë–û–¢–ê –° –≠–ú–û–¶–ò–Ø–ú–ò')
    if person_section:
        rules = []
        for line in person_section.split('\n'):
            if line.strip().startswith('-'):
                rules.append(line.strip())
        if rules:
            settings['personalization_rules'] = '\n'.join(rules)
    
    # === –ü–†–ò–ú–ï–†–´ –î–ò–ê–õ–û–ì–û–í ===
    dialogues_section = parse_section(content, '–°–£–ü–ï–†-–ü–†–ò–ú–ï–†–´ –î–ò–ê–õ–û–ì–û–í', '–§–ò–ù–ê–õ–¨–ù–´–ô')
    if dialogues_section:
        settings['example_dialogues'] = dialogues_section[:2000]
    
    # === –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ ===
    emotional_section = parse_section(content, '–†–ê–ë–û–¢–ê –° –≠–ú–û–¶–ò–Ø–ú–ò', '–ù–ï –î–ï–õ–ê–ô')
    if emotional_section:
        settings['emotional_responses'] = emotional_section[:800]
    
    # === –ê–ù–¢–ò–ü–ê–¢–¢–ï–†–ù–´ ===
    anti_section = parse_section(content, '–ù–ï –î–ï–õ–ê–ô', '–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø')
    if anti_section:
        antipatterns = []
        for line in anti_section.split('\n'):
            if line.strip().startswith('‚ùå'):
                antipatterns.append(line.strip())
        if antipatterns:
            settings['anti_patterns'] = '\n'.join(antipatterns)
    
    # === –ì–û–õ–û–°–û–í–´–ï ===
    if '–ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï' in content:
        voice_match = re.search(r'–ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï.*?"([^"]+)"', content, re.DOTALL)
        if voice_match:
            settings['voice_message_response'] = voice_match.group(1)
    
    # === –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ü–†–ê–í–ò–õ–ê ===
    contextual_section = parse_section(content, '–°–ï–ó–û–ù–ù–û–°–¢–¨', '–õ–û–ö–ê–¶–ò–Ø')
    if contextual_section:
        settings['contextual_rules'] = contextual_section[:800]
    
    # === –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ ===
    safety_section = parse_section(content, '–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –ò –≠–¢–ò–ö–ê', '–°–ï–ó–û–ù–ù–û–°–¢–¨')
    if safety_section:
        settings['safety_guidelines'] = safety_section[:1000]
    
    # === –ü–†–ò–ú–ï–†–´ –û–¢–í–ï–¢–û–í ===
    examples_section = parse_section(content, '–ü–†–ò–ú–ï–†–´', '–ê–õ–ì–û–†–ò–¢–ú')
    if examples_section:
        settings['example_good_responses'] = examples_section[:1000]
    
    # === –ê–õ–ì–û–†–ò–¢–ú ===
    algo_section = parse_section(content, '–ê–õ–ì–û–†–ò–¢–ú', '–†–ê–ë–û–¢–ê –° –í–û–ó–†–ê–ñ–ï–ù–ò–Ø–ú–ò')
    if algo_section:
        settings['algorithm_actions'] = algo_section[:1200]
    
    # === –õ–û–ö–ê–¶–ò–Ø ===
    location_section = parse_section(content, '–õ–û–ö–ê–¶–ò–Ø', '–°–ï–ó–û–ù–ù–û–°–¢–¨')
    if location_section:
        settings['location_features'] = location_section[:600]
    
    # === –°–ï–ó–û–ù–ù–û–°–¢–¨ ===
    season_section = parse_section(content, '–°–ï–ó–û–ù–ù–û–°–¢–¨', '–≠–ö–°–¢–†–ï–ù–ù–´–ï')
    if season_section:
        settings['seasonality'] = season_section[:600]
    
    # === –≠–ö–°–¢–†–ï–ù–ù–´–ï ===
    emergency_section = parse_section(content, '–≠–ö–°–¢–†–ï–ù–ù–´–ï –°–ò–¢–£–ê–¶–ò–ò', '–ú–ï–¢–†–ò–ö–ò')
    if emergency_section:
        settings['emergency_situations'] = emergency_section[:600]
    
    # === –ú–ï–¢–†–ò–ö–ò ===
    metrics_section = parse_section(content, '–ú–ï–¢–†–ò–ö–ò –£–°–ü–ï–•–ê', '–ö–û–ù–ï–¶')
    if metrics_section:
        settings['success_metrics'] = metrics_section[:600]
    
    print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len([v for v in settings.values() if v])} –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π")
    return settings
def create_tables(conn):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã"""
    c = conn.cursor()
    
    c.execute('''CREATE TABLE IF NOT EXISTS salon_settings (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        name TEXT NOT NULL,
        address TEXT,
        google_maps TEXT,
        hours TEXT,
        hours_ru TEXT,
        hours_ar TEXT,
        booking_url TEXT,
        phone TEXT,
        bot_name TEXT,
        city TEXT DEFAULT 'Dubai',
        country TEXT DEFAULT 'UAE',
        timezone TEXT DEFAULT 'Asia/Dubai',
        currency TEXT DEFAULT 'AED',
        updated_at TEXT
    )''')
    
    c.execute('''CREATE TABLE IF NOT EXISTS bot_settings (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        bot_name TEXT NOT NULL,
        personality_traits TEXT,
        greeting_message TEXT,
        farewell_message TEXT,
        price_explanation TEXT,
        price_response_template TEXT,
        premium_justification TEXT,
        booking_redirect_message TEXT,
        fomo_messages TEXT,
        upsell_techniques TEXT,
        communication_style TEXT,
        max_message_length INTEGER DEFAULT 4,
        emoji_usage TEXT,
        languages_supported TEXT DEFAULT 'ru,en,ar',
        objection_handling TEXT,
        negative_handling TEXT,
        safety_guidelines TEXT,
        example_good_responses TEXT,
        algorithm_actions TEXT,
        location_features TEXT,
        seasonality TEXT,
        emergency_situations TEXT,
        success_metrics TEXT,
        objection_expensive TEXT,
        objection_think_about_it TEXT,
        objection_no_time TEXT,
        objection_pain TEXT,
        objection_result_doubt TEXT,
        objection_cheaper_elsewhere TEXT,
        objection_too_far TEXT,
        objection_consult_husband TEXT,
        objection_first_time TEXT,
        objection_not_happy TEXT,
        emotional_triggers TEXT,
        social_proof_phrases TEXT,
        personalization_rules TEXT,
        example_dialogues TEXT,
        emotional_responses TEXT,
        anti_patterns TEXT,
        voice_message_response TEXT,
        contextual_rules TEXT,
        updated_at TEXT
    )''')
    
    conn.commit()
def migrate_settings():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("=" * 70)
    print("üöÄ –ü–û–õ–ù–ê–Ø –ú–ò–ì–†–ê–¶–ò–Ø –ù–ê–°–¢–†–û–ï–ö –ë–û–¢–ê")
    print("=" * 70)
    print()
    
    if not os.path.exists(DATABASE_NAME):
        print(f"‚ùå –ë–î {DATABASE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return 1
    
    conn = sqlite3.connect(DATABASE_NAME)
    c = conn.cursor()
    
    create_tables(conn)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    c.execute("SELECT COUNT(*) FROM bot_settings")
    existing = c.fetchone()[0]
    
    if existing > 0:
        print("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å –≤ –ë–î!")
        print("   –ë—É–¥—É—Ç –û–ë–ù–û–í–õ–ï–ù–´ –≤—Å–µ –ø–æ–ª—è –∏–∑ bot_instructions_file.txt")
        response = input("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (yes/no): ")
        if response.lower() not in ['yes', 'y']:
            conn.close()
            print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            return 0
    else:
        print("üìù –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    # –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
    settings = parse_instructions_file()
    now = datetime.now().isoformat()
    
    # === SALON SETTINGS ===
    print("\nüíæ –ó–∞–ø–æ–ª–Ω—è—é salon_settings...")
    try:
        c.execute("SELECT COUNT(*) FROM salon_settings")
        salon_exists = c.fetchone()[0] > 0
        
        if salon_exists:
            c.execute("""UPDATE salon_settings SET
                name = ?,
                address = ?,
                google_maps = ?,
                hours = ?,
                booking_url = ?,
                phone = ?,
                bot_name = ?,
                updated_at = ?
                WHERE id = 1""",
            (
                settings['salon_name'],
                settings['salon_address'],
                settings['google_maps_link'],
                settings['salon_hours'],
                settings['booking_url'],
                settings['salon_phone'],
                settings['bot_name'],
                now
            ))
            print("   ‚úÖ salon_settings –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            c.execute("""INSERT INTO salon_settings (
                id, name, address, google_maps, hours, booking_url, phone, bot_name, updated_at
            ) VALUES (1, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (
                settings['salon_name'],
                settings['salon_address'],
                settings['google_maps_link'],
                settings['salon_hours'],
                settings['booking_url'],
                settings['salon_phone'],
                settings['bot_name'],
                now
            ))
            print("   ‚úÖ salon_settings —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ salon_settings: {e}")
    
    # === BOT SETTINGS ===
    print("\nüíæ –ó–∞–ø–æ–ª–Ω—è—é bot_settings (–≤—Å–µ –ø–æ–ª—è)...")
    try:
        if existing > 0:
            # –û–ë–ù–û–í–õ–ï–ù–ò–ï
            c.execute("""UPDATE bot_settings SET
                bot_name = ?,
                personality_traits = ?,
                greeting_message = ?,
                farewell_message = ?,
                price_explanation = ?,
                price_response_template = ?,
                premium_justification = ?,
                booking_redirect_message = ?,
                fomo_messages = ?,
                upsell_techniques = ?,
                communication_style = ?,
                max_message_length = ?,
                emoji_usage = ?,
                languages_supported = ?,
                objection_expensive = ?,
                objection_think_about_it = ?,
                objection_no_time = ?,
                objection_pain = ?,
                objection_result_doubt = ?,
                objection_cheaper_elsewhere = ?,
                objection_too_far = ?,
                objection_consult_husband = ?,
                objection_first_time = ?,
                objection_not_happy = ?,
                emotional_triggers = ?,
                social_proof_phrases = ?,
                personalization_rules = ?,
                example_dialogues = ?,
                emotional_responses = ?,
                anti_patterns = ?,
                voice_message_response = ?,
                contextual_rules = ?,
                safety_guidelines = ?,
                example_good_responses = ?,
                algorithm_actions = ?,
                location_features = ?,
                seasonality = ?,
                emergency_situations = ?,
                success_metrics = ?,
                updated_at = ?
                WHERE id = 1""",
            (
                settings['bot_name'],
                settings['personality_traits'],
                settings['greeting_message'],
                settings['farewell_message'],
                settings['price_explanation'],
                settings.get('price_response_template', ''),
                settings.get('premium_justification', ''),
                settings.get('booking_redirect_message', ''),
                settings.get('fomo_messages', ''),
                settings.get('upsell_techniques', ''),
                settings['communication_style'],
                settings['max_message_length'],
                settings['emoji_usage'],
                settings['languages_supported'],
                settings.get('objection_expensive', ''),
                settings.get('objection_think_about_it', ''),
                settings.get('objection_no_time', ''),
                settings.get('objection_pain', ''),
                settings.get('objection_result_doubt', ''),
                settings.get('objection_cheaper_elsewhere', ''),
                settings.get('objection_too_far', ''),
                settings.get('objection_consult_husband', ''),
                settings.get('objection_first_time', ''),
                settings.get('objection_not_happy', ''),
                settings.get('emotional_triggers', ''),
                settings.get('social_proof_phrases', ''),
                settings.get('personalization_rules', ''),
                settings.get('example_dialogues', ''),
                settings.get('emotional_responses', ''),
                settings.get('anti_patterns', ''),
                settings.get('voice_message_response', ''),
                settings.get('contextual_rules', ''),
                settings.get('safety_guidelines', ''),
                settings.get('example_good_responses', ''),
                settings.get('algorithm_actions', ''),
                settings.get('location_features', ''),
                settings.get('seasonality', ''),
                settings.get('emergency_situations', ''),
                settings.get('success_metrics', ''),
                now
            ))
            print("   ‚úÖ bot_settings –æ–±–Ω–æ–≤–ª–µ–Ω—ã (40 –ø–æ–ª–µ–π)")
        else:
            # –°–û–ó–î–ê–ù–ò–ï
            c.execute("""INSERT INTO bot_settings (
                id, bot_name, personality_traits, greeting_message, farewell_message,
                price_explanation, price_response_template, premium_justification,
                booking_redirect_message, fomo_messages, upsell_techniques,
                communication_style, max_message_length, emoji_usage, languages_supported,
                objection_expensive, objection_think_about_it, objection_no_time,
                objection_pain, objection_result_doubt, objection_cheaper_elsewhere,
                objection_too_far, objection_consult_husband, objection_first_time,
                objection_not_happy, emotional_triggers, social_proof_phrases,
                personalization_rules, example_dialogues, emotional_responses,
                anti_patterns, voice_message_response, contextual_rules,
                safety_guidelines, example_good_responses, algorithm_actions,
                location_features, seasonality, emergency_situations, success_metrics,
                updated_at
            ) VALUES (1, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (
                settings['bot_name'],
                settings['personality_traits'],
                settings['greeting_message'],
                settings['farewell_message'],
                settings['price_explanation'],
                settings.get('price_response_template', ''),
                settings.get('premium_justification', ''),
                settings.get('booking_redirect_message', ''),
                settings.get('fomo_messages', ''),
                settings.get('upsell_techniques', ''),
                settings['communication_style'],
                settings['max_message_length'],
                settings['emoji_usage'],
                settings['languages_supported'],
                settings.get('objection_expensive', ''),
                settings.get('objection_think_about_it', ''),
                settings.get('objection_no_time', ''),
                settings.get('objection_pain', ''),
                settings.get('objection_result_doubt', ''),
                settings.get('objection_cheaper_elsewhere', ''),
                settings.get('objection_too_far', ''),
                settings.get('objection_consult_husband', ''),
                settings.get('objection_first_time', ''),
                settings.get('objection_not_happy', ''),
                settings.get('emotional_triggers', ''),
                settings.get('social_proof_phrases', ''),
                settings.get('personalization_rules', ''),
                settings.get('example_dialogues', ''),
                settings.get('emotional_responses', ''),
                settings.get('anti_patterns', ''),
                settings.get('voice_message_response', ''),
                settings.get('contextual_rules', ''),
                settings.get('safety_guidelines', ''),
                settings.get('example_good_responses', ''),
                settings.get('algorithm_actions', ''),
                settings.get('location_features', ''),
                settings.get('seasonality', ''),
                settings.get('emergency_situations', ''),
                settings.get('success_metrics', ''),
                now
            ))
            print("   ‚úÖ bot_settings —Å–æ–∑–¥–∞–Ω—ã (40 –ø–æ–ª–µ–π)")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ bot_settings: {e}")
        import traceback
        traceback.print_exc()
    
    conn.commit()
    conn.close()
    
    print()
    print("=" * 70)
    print("‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"   ‚Ä¢ salon_settings: {'–æ–±–Ω–æ–≤–ª–µ–Ω—ã' if salon_exists else '—Å–æ–∑–¥–∞–Ω—ã'}")
    print(f"   ‚Ä¢ bot_settings: {'–æ–±–Ω–æ–≤–ª–µ–Ω—ã' if existing > 0 else '—Å–æ–∑–¥–∞–Ω—ã'}")
    print()
    print("üîß –ß—Ç–æ –¥–∞–ª—å—à–µ:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: uvicorn main:app --reload")
    print("   2. –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000/admin/bot-settings")
    print("=" * 70)
    print()
    
    return 0