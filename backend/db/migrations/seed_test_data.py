"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ë–î —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ó–∞–ø—É—Å–∫: python -m db.migrations.seed_test_data
"""
import sqlite3
import random
import hashlib
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../..'))

from config import DATABASE_NAME

# –°–ø–∏—Å–∫–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
FIRST_NAMES = [
    "–ê–Ω–Ω–∞", "–ú–∞—Ä–∏—è", "–ï–ª–µ–Ω–∞", "–û–ª—å–≥–∞", "–ò—Ä–∏–Ω–∞", "–ù–∞—Ç–∞–ª—å—è", "–¢–∞—Ç—å—è–Ω–∞", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞",
    "–Æ–ª–∏—è", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞", "–í–∏–∫—Ç–æ—Ä–∏—è", "–î–∞—Ä—å—è", "–ü–æ–ª–∏–Ω–∞", "–ê–Ω–∞—Å—Ç–∞—Å–∏—è",
    "Sarah", "Emma", "Olivia", "Sophia", "Isabella", "Mia", "Charlotte", "Amelia"
]

LAST_NAMES = [
    "–ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä–æ–≤–∞", "–°–∏–¥–æ—Ä–æ–≤–∞", "–°–º–∏—Ä–Ω–æ–≤–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–∞", "–ü–æ–ø–æ–≤–∞", "–°–æ–∫–æ–ª–æ–≤–∞",
    "–õ–µ–±–µ–¥–µ–≤–∞", "–ö–æ–∑–ª–æ–≤–∞", "–ù–æ–≤–∏–∫–æ–≤–∞", "–ú–æ—Ä–æ–∑–æ–≤–∞", "–ü–µ—Ç—Ä–µ–Ω–∫–æ", "–í–æ–ª–∫–æ–≤–∞", "–°–æ–ª–æ–≤—å–µ–≤–∞",
    "Smith", "Johnson", "Williams", "Brown", "Jones", "Garcia", "Miller", "Davis"
]

SERVICES = [
    ("–ú–∞–Ω–∏–∫—é—Ä", 150, 60),
    ("–ü–µ–¥–∏–∫—é—Ä", 180, 75),
    ("–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –Ω–æ–≥—Ç–µ–π", 250, 120),
    ("–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –Ω–æ–≥—Ç–µ–π", 200, 90),
    ("–î–∏–∑–∞–π–Ω –Ω–æ–≥—Ç–µ–π", 100, 45),
    ("–ú–∞—Å—Å–∞–∂ —Ä—É–∫", 120, 30),
    ("–ü–∞—Ä–∞—Ñ–∏–Ω–æ—Ç–µ—Ä–∞–ø–∏—è", 90, 40),
    ("SPA –º–∞–Ω–∏–∫—é—Ä", 280, 90),
    ("–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä", 170, 70),
    ("–û–º–±—Ä–µ –Ω–∞ –Ω–æ–≥—Ç—è—Ö", 200, 80)
]

CLIENT_STATUSES = ["new", "lead", "customer"]
BOOKING_STATUSES = ["pending", "confirmed", "completed", "cancelled"]
USER_ROLES = ["admin", "manager", "employee"]

MESSAGES_TEMPLATES = [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {service}",
    "–ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç {service}?",
    "–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞?",
    "–ú–æ–∂–Ω–æ –ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {service} –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ?",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É! –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–∫—Ü–∏–∏ –Ω–∞ {service}?",
    "–•–æ—á—É –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å –Ω–∞ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è",
    "–û—Ç–ª–∏—á–Ω—ã–π —Å–∞–ª–æ–Ω! –ë—É–¥—É —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –¥—Ä—É–∑—å—è–º",
    "Hello! I would like to book {service}",
    "How much does {service} cost?",
    "Can I book an appointment for tomorrow?",
    "Thank you for the amazing service!",
]

BOT_RESPONSES = [
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üòä –ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É —Å –∑–∞–ø–∏—Å—å—é!",
    "–°—Ç–æ–∏–º–æ—Å—Ç—å {service} - {price} AED üíé",
    "–£ –Ω–∞—Å –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã. –ö–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ?",
    "–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ñ–¥–µ–º –≤–∞—Å ‚ú®",
    "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üíñ –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞!",
    "–î–∞, —É –Ω–∞—Å —Å–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
    "–ö–æ–Ω–µ—á–Ω–æ, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –≤–∞—à—É –∑–∞–ø–∏—Å—å. –ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è?",
    "Hello! üòä I'll help you with booking!",
    "The price for {service} is {price} AED üíé",
    "Sure! When would you like to come?",
]


def generate_phone():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return f"+971 5{random.randint(0,9)} {random.randint(100,999)} {random.randint(1000,9999)}"


def generate_instagram_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Instagram ID"""
    return f"{random.randint(100000000000, 999999999999)}"


def generate_username():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Instagram username"""
    name = random.choice(FIRST_NAMES).lower()
    suffix = random.choice(["_dubai", "_uae", "", f"_{random.randint(1,99)}", ".beauty"])
    return f"{name}{suffix}"


def generate_datetime_range(days_ago=30):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ"""
    days_offset = random.randint(0, days_ago)
    hours_offset = random.randint(9, 20)  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
    minutes_offset = random.choice([0, 15, 30, 45])
    
    date = datetime.now() - timedelta(days=days_offset)
    date = date.replace(hour=hours_offset, minute=minutes_offset, second=0, microsecond=0)
    return date.isoformat()


def seed_users(conn, count=20):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    c = conn.cursor()
    users = []
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    # –ê–¥–º–∏–Ω –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
    password_hash = hashlib.sha256("admin123".encode()).hexdigest()
    c.execute("""INSERT INTO users (username, password_hash, full_name, email, role, created_at, is_active)
                 VALUES (?, ?, ?, ?, ?, ?, 1)""",
              ("admin", password_hash, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "admin@mlediamant.com", "admin", 
               datetime.now().isoformat()))
    users.append(c.lastrowid)
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    for i in range(count - 1):
        username = f"user{i+1}"
        password = "password123"
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        full_name = f"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}"
        email = f"user{i+1}@mlediamant.com"
        role = random.choice(USER_ROLES)
        
        c.execute("""INSERT INTO users (username, password_hash, full_name, email, role, created_at, is_active)
                     VALUES (?, ?, ?, ?, ?, ?, 1)""",
                  (username, password_hash, full_name, email, role, generate_datetime_range(90)))
        users.append(c.lastrowid)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print(f"   üë§ admin / admin123 (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)")
    print(f"   üë§ user1-{count-1} / password123")
    return users


def seed_clients(conn, count=20):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    c = conn.cursor()
    clients = []
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ {count} –∫–ª–∏–µ–Ω—Ç–æ–≤...")
    
    for i in range(count):
        instagram_id = generate_instagram_id()
        username = generate_username()
        name = f"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}"
        phone = generate_phone()
        status = random.choice(CLIENT_STATUSES)
        first_contact = generate_datetime_range(60)
        last_contact = generate_datetime_range(5)
        total_messages = random.randint(3, 50)
        lifetime_value = random.randint(0, 5000)
        is_pinned = 1 if random.random() > 0.8 else 0
        
        c.execute("""INSERT INTO clients 
                     (instagram_id, username, name, phone, status, first_contact, 
                      last_contact, total_messages, lifetime_value, is_pinned, 
                      labels, detected_language)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                  (instagram_id, username, name, phone, status, first_contact,
                   last_contact, total_messages, lifetime_value, is_pinned,
                   "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç", random.choice(["ru", "en", "ar"])))
        
        clients.append(instagram_id)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
    return clients


def seed_services(conn):
    """–°–æ–∑–¥–∞—Ç—å —É—Å–ª—É–≥–∏"""
    c = conn.cursor()
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ —É—Å–ª—É–≥–∏
    c.execute("SELECT COUNT(*) FROM services")
    if c.fetchone()[0] > 0:
        print("‚ö†Ô∏è  –£—Å–ª—É–≥–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return
    
    for service_name, price, duration in SERVICES:
        c.execute("""INSERT INTO services 
                     (name, name_en, name_ar, price, duration, description, 
                      description_en, description_ar, category, is_active)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1)""",
                  (service_name, service_name, service_name, price, duration,
                   f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π {service_name.lower()}",
                   f"Professional {service_name}",
                   service_name, "–ù–æ–≥—Ç–µ–≤–æ–π —Å–µ—Ä–≤–∏—Å"))
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(SERVICES)} —É—Å–ª—É–≥")


def seed_bookings(conn, clients, count=20):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏"""
    c = conn.cursor()
    bookings = []
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ {count} –∑–∞–ø–∏—Å–µ–π...")
    
    for i in range(count):
        client_id = random.choice(clients)
        service = random.choice(SERVICES)
        service_name = service[0]
        revenue = service[1]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ (–≤ –±—É–¥—É—â–µ–º –∏–ª–∏ –ø—Ä–æ—à–ª–æ–º)
        future = random.random() > 0.5
        if future:
            booking_date = datetime.now() + timedelta(days=random.randint(1, 14))
        else:
            booking_date = datetime.now() - timedelta(days=random.randint(1, 30))
        
        booking_date = booking_date.replace(
            hour=random.randint(10, 20),
            minute=random.choice([0, 15, 30, 45]),
            second=0, microsecond=0
        )
        
        status = random.choice(BOOKING_STATUSES) if not future else "pending"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
        c.execute("SELECT name, phone FROM clients WHERE instagram_id = ?", (client_id,))
        client_data = c.fetchone()
        name = client_data[0] if client_data else "–ö–ª–∏–µ–Ω—Ç"
        phone = client_data[1] if client_data else generate_phone()
        
        created_at = generate_datetime_range(45)
        
        c.execute("""INSERT INTO bookings 
                     (instagram_id, service_name, datetime, phone, name, status, 
                      created_at, revenue)
                     VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                  (client_id, service_name, booking_date.isoformat(), phone, name,
                   status, created_at, revenue if status == "completed" else 0))
        
        bookings.append(c.lastrowid)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(bookings)} –∑–∞–ø–∏—Å–µ–π")
    return bookings


def seed_messages(conn, clients, count_per_client=5):
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    c = conn.cursor()
    messages = []
    
    print(f"\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ {count_per_client} –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞)...")
    
    total = 0
    for client_id in clients:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        num_messages = random.randint(3, count_per_client)
        
        for i in range(num_messages):
            # –ß–µ—Ä–µ–¥—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–æ—Ç–∞
            if i % 2 == 0:
                sender = "client"
                service = random.choice(SERVICES)[0]
                message = random.choice(MESSAGES_TEMPLATES).replace("{service}", service)
            else:
                sender = "bot"
                service = random.choice(SERVICES)
                message = random.choice(BOT_RESPONSES).replace(
                    "{service}", service[0]
                ).replace("{price}", str(service[1]))
            
            timestamp = generate_datetime_range(30)
            is_read = 1 if sender == "bot" or random.random() > 0.3 else 0
            
            c.execute("""INSERT INTO chat_history 
                         (instagram_id, message, sender, timestamp, message_type, 
                          language, is_read)
                         VALUES (?, ?, ?, ?, ?, ?, ?)""",
                      (client_id, message, sender, timestamp, "text", "ru", is_read))
            
            messages.append(c.lastrowid)
            total += 1
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {total} —Å–æ–æ–±—â–µ–Ω–∏–π")
    return messages


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    print("=" * 70)
    print("üé≤ –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –î–õ–Ø CRM")
    print("=" * 70)
    
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        response = input("\n‚ö†Ô∏è  –û—á–∏—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ? (y/N): ")
        if response.lower() == 'y':
            print("\nüóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
            c = conn.cursor()
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            c.execute("PRAGMA foreign_keys = OFF")
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables = ["chat_history", "bookings", "booking_temp", "clients", 
                     "sessions", "users"]
            for table in tables:
                try:
                    c.execute(f"DELETE FROM {table}")
                    print(f"   ‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}")
                except sqlite3.OperationalError:
                    print(f"   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            c.execute("PRAGMA foreign_keys = ON")
            conn.commit()
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã\n")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        users = seed_users(conn, count=10)
        clients = seed_clients(conn, count=25)
        seed_services(conn)
        bookings = seed_bookings(conn, clients, count=30)
        messages = seed_messages(conn, clients, count_per_client=8)
        
        conn.commit()
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        c = conn.cursor()
        
        c.execute("SELECT COUNT(*) FROM users")
        users_count = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM clients")
        clients_count = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM bookings")
        bookings_count = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM chat_history")
        messages_count = c.fetchone()[0]
        
        c.execute("SELECT COUNT(*) FROM services")
        services_count = c.fetchone()[0]
        
        print("\n" + "=" * 70)
        print("‚úÖ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("=" * 70)
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
        print(f"   üë§ –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}")
        print(f"   üìÖ –ó–∞–ø–∏—Å–µ–π: {bookings_count}")
        print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count}")
        print(f"   üíé –£—Å–ª—É–≥: {services_count}")
        
        print(f"\nüîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:")
        print(f"   Username: admin")
        print(f"   Password: admin123")
        print(f"   Role: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
        print(f"\n   Username: user1, user2, ..., user9")
        print(f"   Password: password123")
        print(f"   Role: admin/manager/employee (—Å–ª—É—á–∞–π–Ω–æ)")
        
        print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
        print("=" * 70)
        
        conn.close()
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True


if __name__ == "__main__":
    main()