"""
API Endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
"""
from fastapi import APIRouter, Request, Query, Cookie
from fastapi.responses import JSONResponse
from typing import Optional
from httpx import TimeoutException, AsyncClient
from integrations.instagram import send_file

from db import (
    get_chat_history, mark_messages_as_read, save_message,
    get_unread_messages_count, log_activity
)
from integrations import send_message
from utils import require_auth, get_total_unread
from logger import log_error,log_info,log_warning

router = APIRouter(tags=["Chat"])


@router.get("/chat/messages")
async def get_chat_messages(
    client_id: str = Query(...),
    limit: int = Query(50),
    session_token: Optional[str] = Cookie(None)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞"""
    user = require_auth(session_token)
    if not user:
        return JSONResponse({"error": "Unauthorized"}, status_code=401)
    
    messages_raw = get_chat_history(client_id, limit=limit)
    mark_messages_as_read(client_id, user["id"])
    
    return {
        "messages": [
            {
                "id": msg[4] if len(msg) > 4 else None,
                "message": msg[0],
                "sender": msg[1],
                "timestamp": msg[2],
                "type": msg[3] if len(msg) > 3 else "text"
            }
            for msg in messages_raw
        ]
    }


@router.post("/chat/send")
async def send_chat_message(
    request: Request,
    session_token: Optional[str] = Cookie(None)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É"""
    user = require_auth(session_token)
    if not user:
        return JSONResponse({"error": "Unauthorized"}, status_code=401)
    
    data = await request.json()
    instagram_id = data.get('instagram_id')
    message = data.get('message')
    
    if not instagram_id or not message:
        return JSONResponse({"error": "Missing data"}, status_code=400)
    
    try:
        result = await send_message(instagram_id, message)
        
        if "error" not in result:
            save_message(instagram_id, message, "bot")
            log_activity(user["id"], "send_message", "client", instagram_id, 
                        "Message sent")
            return {"success": True, "message": "Message sent"}
        
        return JSONResponse({"error": "Send failed"}, status_code=500)
    except Exception as e:
        log_error(f"Error sending message: {e}", "api")
        return JSONResponse({"error": str(e)}, status_code=500)
    

@router.post("/chat/send-file")
async def send_chat_file(
    request: Request,
    session_token: Optional[str] = Cookie(None)
):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –∫–ª–∏–µ–Ω—Ç—É"""
    user = require_auth(session_token)
    if not user:
        return JSONResponse({"error": "Unauthorized"}, status_code=401)
    
    try:
        data = await request.json()
        instagram_id = data.get('instagram_id')
        # –ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ –≥–¥–µ –ø–æ–ª—É—á–∞–µ–º file_url, –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π:
        file_url = data.get('file_url')
        file_type = data.get('file_type', 'image')

        # ‚úÖ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        if file_url and file_url.startswith('https://mlediamant.com'):
            try:
                # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                import os
                from pathlib import Path
                
                url_path = file_url.replace('https://mlediamant.com', '')
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ static/ –µ—Å–ª–∏ –µ—Å—Ç—å
                if url_path.startswith('/static/'):
                    url_path = url_path[7:]  # —É–±–∏—Ä–∞–µ–º '/static/'
                local_path = Path("static") / url_path.lstrip('/')
                
                if not local_path.exists():
                    log_error(f"‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}", "api")
                    return JSONResponse(
                        {"error": "File not found on server"},
                        status_code=404
                    )
                
                log_info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {local_path}", "api")
            except Exception as e:
                log_warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}", "api")
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not instagram_id:
            log_error("‚ùå Missing instagram_id", "api")
            return JSONResponse({"error": "instagram_id is required"}, status_code=400)
        
        if not file_url:
            log_error("‚ùå Missing file_url", "api")
            return JSONResponse({"error": "file_url is required"}, status_code=400)
        
        # ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        allowed_types = ['image', 'video', 'audio', 'file']
        if file_type not in allowed_types:
            log_error(f"‚ùå Invalid file_type: {file_type}", "api")
            return JSONResponse(
                {"error": f"file_type must be one of: {', '.join(allowed_types)}"}, 
                status_code=400
            )
        
        log_info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç {user['username']} –∫–ª–∏–µ–Ω—Ç—É {instagram_id}", "api")
        log_info(f"   URL: {file_url}", "api")
        log_info(f"   Type: {file_type}", "api")
        
        # ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –ª–æ–∫–∞–ª—å–Ω–æ
        if file_url.startswith('https://mlediamant.com'):
            log_info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞...", "api")
            try:
                import os
                from pathlib import Path
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–∑ URL
                url_path = file_url.replace('https://mlediamant.com', '')
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ static/ –µ—Å–ª–∏ –µ—Å—Ç—å
                if url_path.startswith('/static/'):
                    url_path = url_path[7:]  # —É–±–∏—Ä–∞–µ–º '/static/'
                local_path = Path("static") / url_path.lstrip('/')
                
                if local_path.exists():
                    file_size = local_path.stat().st_size
                    log_info(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {local_path} ({file_size} bytes)", "api")
                else:
                    log_warning(f"‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {local_path}", "api")
            except Exception as diag_err:
                log_warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞: {diag_err}", "api")

        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL –¥–ª—è Instagram
        # Instagram —Ç—Ä–µ–±—É–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π HTTPS URL –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not file_url.startswith('https://'):
            log_error(f"‚ùå Instagram —Ç—Ä–µ–±—É–µ—Ç HTTPS URL: {file_url}", "api")
            return JSONResponse(
                {"error": "Instagram requires HTTPS URLs"}, 
                status_code=400
            )
        
        # ‚úÖ –ü–†–û–í–ï–†–ö–ê –î–õ–Ø LOCALHOST: –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ, —Ñ–∞–π–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è Instagram
        if 'localhost' in file_url or '127.0.0.1' in file_url:
            log_error(f"‚ùå Instagram –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ localhost —Ñ–∞–π–ª–∞–º: {file_url}", "api")
            return JSONResponse(
                {"error": "Instagram cannot access localhost files. Use ngrok or deploy to production."}, 
                status_code=400
            )
        
        # ‚úÖ –£–ë–†–ê–õ–ò –í–°–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø: –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª—ã –æ—Ç–æ–≤—Å—é–¥—É
        log_info(f"üìÅ –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª: {file_url}", "api")
        
        # ‚úÖ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤)
        if file_url.startswith('https://mlediamant.com'):
            try:
                url_path = file_url.replace('https://mlediamant.com', '')
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ static/ –µ—Å–ª–∏ –µ—Å—Ç—å
                if url_path.startswith('/static/'):
                    url_path = url_path[7:]  # —É–±–∏—Ä–∞–µ–º '/static/'
                local_path = Path("static") / url_path.lstrip('/')
                
                if local_path.exists():
                    file_size = local_path.stat().st_size
                    size_mb = file_size / (1024 * 1024)
                    log_info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} MB", "api")
                    
                    max_size = 25 if file_type == 'video' else 8
                    if size_mb > max_size:
                        log_error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {size_mb:.2f} MB", "api")
                        return JSONResponse(
                            {"error": f"File too large: {size_mb:.2f}MB (max {max_size}MB)"}, 
                            status_code=400
                        )
            except Exception as e:
                log_warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞: {e}", "api")
                # –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
        
        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Instagram API
        # –ó–∞–º–µ–Ω—è–µ–º mlediamant.com –Ω–∞ zrok URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Instagram
        instagram_file_url = file_url
        if file_url.startswith('https://mlediamant.com'):
            # –ü–æ–ª—É—á–∞–µ–º zrok URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π
            zrok_url = os.getenv('ZROK_URL', 'https://tukq4gpr4pbf.share.zrok.io')
            instagram_file_url = file_url.replace('https://mlediamant.com', zrok_url)
            log_info(f"üîÑ –ó–∞–º–µ–Ω—è–µ–º URL –¥–ª—è Instagram: {file_url} -> {instagram_file_url}", "api")
        
        log_info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Instagram API...", "api")
        log_info(f"üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏: instagram_id={instagram_id}, file_url={instagram_file_url}, file_type={file_type}", "api")
        result = await send_file(instagram_id, instagram_file_url, file_type)
        log_info(f"üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: {result}", "api")
        
        # ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if "error" in result:
            error_msg = result.get("error", "Unknown error")
            log_error(f"‚ùå Instagram API error: {error_msg}", "api")
            
            # –ü–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ Instagram API
            if "HTTP 400" in error_msg or "Bad Request" in error_msg:
                return JSONResponse(
                    {"error": "Invalid file format or URL", "details": error_msg}, 
                    status_code=400
                )
            elif "HTTP 403" in error_msg or "Forbidden" in error_msg:
                return JSONResponse(
                    {"error": "Access denied by Instagram", "details": error_msg}, 
                    status_code=403
                )
            elif "HTTP 413" in error_msg or "too large" in error_msg.lower():
                return JSONResponse(
                    {"error": "File too large for Instagram", "details": error_msg}, 
                    status_code=413
                )
            else:
                return JSONResponse(
                    {"error": "Failed to send file", "details": error_msg}, 
                    status_code=500
                )
        
        # ‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å zrok URL
        file_display_name = instagram_file_url.split('/')[-1] if '/' in instagram_file_url else instagram_file_url
        save_message(
            instagram_id, 
            instagram_file_url,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π zrok URL
            "bot", 
            message_type=file_type
        )
        
        # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        log_activity(
            user["id"], 
            "send_file", 
            "client", 
            instagram_id, 
            f"File sent: {file_type} - {file_display_name}"
        )
        
        log_info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É {instagram_id}", "api")
        
        return {
            "success": True, 
            "message": "File sent successfully",
            "file_type": file_type,
            "instagram_response": result
        }
        
    except ValueError as ve:
        log_error(f"‚ùå Validation error: {ve}", "api")
        return JSONResponse({"error": str(ve)}, status_code=400)
    except Exception as e:
        log_error(f"‚ùå Unexpected error sending file: {e}", "api", exc_info=True)
        return JSONResponse(
            {"error": "Internal server error", "details": str(e)}, 
            status_code=500
        )
    

@router.get("/unread-count")
async def get_unread_count(session_token: Optional[str] = Cookie(None)):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = require_auth(session_token)
    if not user:
        return JSONResponse({"error": "Unauthorized"}, status_code=401)
    
    return {"count": get_total_unread()}


@router.get("/chat/unread/{client_id}")
async def get_client_unread_count(
    client_id: str,
    session_token: Optional[str] = Cookie(None)
):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"""
    user = require_auth(session_token)
    if not user:
        return JSONResponse({"error": "Unauthorized"}, status_code=401)
    
    count = get_unread_messages_count(client_id)
    return {"client_id": client_id, "unread_count": count}