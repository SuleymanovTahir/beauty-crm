"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
from fastapi import FastAPI, Request
from fastapi.responses import RedirectResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import time

from logger import logger, log_info, log_error, log_critical
from db import init_database
from db.settings import get_salon_settings
from bot import get_bot
from utils import ensure_upload_directories

# –ò–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
from api import router as api_router
from auth import router as auth_router
from webhooks import router as webhooks_router
from api.reactions import router as reactions_router
from api.templates import router as templates_router
from api.statuses import router as statuses_router
from api.uploads import router as upload_router
from api.proxy import router as proxy_router  # ‚úÖ –ù–û–í–´–ô –†–û–£–¢–ï–†
from api.reminders import router as reminders_router
from api.notifications import router as notifications_router
from api.tags import router as tags_router
from api.automation import router as automation_router
from api.reports import router as reports_router
from api.settings import router as settings_router 
from api.public import router as public_router


# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
ensure_upload_directories()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–ª–æ–Ω–∞
salon = get_salon_settings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(title=f"üíé {salon['name']} CRM")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏ –∏ —à–∞–±–ª–æ–Ω–æ–≤
app.mount("/static", StaticFiles(directory="static"), name="static/dist")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
# API —Ä–æ—É—Ç–µ—Ä—ã (–≤—Å–µ —á–µ—Ä–µ–∑ /api)
app.include_router(api_router, prefix="/api")
app.include_router(auth_router, prefix="/api")
app.include_router(reactions_router, prefix="/api")
app.include_router(templates_router, prefix="/api")
app.include_router(statuses_router, prefix="/api")
app.include_router(upload_router, prefix="/api")
app.include_router(reminders_router, prefix="/api")
app.include_router(notifications_router, prefix="/api")
app.include_router(tags_router, prefix="/api")
app.include_router(automation_router, prefix="/api")
app.include_router(reports_router, prefix="/api")
app.include_router(settings_router, prefix="/api")
# –ü—É–±–ª–∏—á–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã (–ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ /public)
app.include_router(public_router, prefix="/public")
# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã (–ë–ï–ó /api)
app.include_router(webhooks_router)  # –¥–ª—è Instagram webhook
app.include_router(proxy_router)     # –¥–ª—è –ø—Ä–æ–∫—Å–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π


# ===== MIDDLEWARE =====

@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    response = await call_next(request)
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["X-Frame-Options"] = "DENY"
    response.headers["X-XSS-Protection"] = "1; mode=block"
    return response


@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏–∫—É –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    if request.url.path.startswith("/static") or request.url.path == "/docs":
        return await call_next(request)
    
    start_time = time.time()
    log_info(f"üî• {request.method} {request.url.path}", "middleware")
    
    try:
        response = await call_next(request)
        process_time = time.time() - start_time
        log_info(f"üì§ {request.method} {request.url.path} ‚Üí {response.status_code} ({process_time:.2f}s)", 
                "middleware")
        return response
    except Exception as e:
        log_error(f"‚ùå –û–®–ò–ë–ö–ê: {request.method} {request.url.path}", "middleware", 
                 exc_info=True)
        raise


# CORS –¥–ª—è React
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "https://mlediamant.com",
        "http://mlediamant.com",
        "http://91.201.215.32:8000",
        "http://localhost:5173",
        "http://127.0.0.1:5173",
        "http://localhost:3000",
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# ===== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö =====

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–õ–æ–≤–∏—Ç –í–°–ï –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏"""
    log_critical(f"‚ùå –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {exc}", "exception_handler")
    log_error(f"üìç URL: {request.url}", "exception_handler")
    
    import traceback
    log_error(f"üìã Traceback:\n{traceback.format_exc()}", "exception_handler")
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "message": str(exc),
        }
    )


# ===== –û–°–ù–û–í–ù–´–ï ENDPOINTS =====

@app.get("/")
async def root():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return {
        "status": "‚úÖ CRM —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "salon": salon['name'],
        "bot": salon['bot_name'],
        "version": "2.0.0",
        "features": [
            "AI-–≥–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂ (Gemini 2.0 Flash)",
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è CRM —Å –¥–∞—à–±–æ—Ä–¥–æ–º",
            "–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–æ–¥–∞–∂ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π",
            "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤",
            "–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã",
            "–ú–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å (RU/EN/AR)",
            "–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π Instagram"  # ‚úÖ –ù–û–í–ê–Ø –§–ò–ß–ê
        ]
    }


@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        from db import get_stats
        stats = get_stats()
        return {
            "status": "healthy",
            "database": "connected",
            "gemini_ai": "active",
            "image_proxy": "active",  # ‚úÖ –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê
            "total_clients": stats['total_clients'],
            "total_bookings": stats['total_bookings']
        }
    except Exception as e:
        log_error(f"Health check failed: {e}", "health")
        return {
            "status": "error",
            "error": str(e)
        }

@app.get("/privacy-policy")
async def privacy_policy():
    return RedirectResponse(url="/#/privacy-policy")

@app.get("/terms")
async def terms():
    return RedirectResponse(url="/#/terms")


# ===== –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø =====

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        log_info("=" * 70, "startup")
        log_info("üöÄ –ó–∞–ø—É—Å–∫ CRM —Å–∏—Å—Ç–µ–º—ã...", "startup")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        init_database()
        
        # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:
        from db.migrations.migrate_salon_settings import migrate_salon_settings
        # from db.migrations.migrate_services import migrate_services
        # from db.migrations.migrate_bot_settings import migrate_settings
        # from db.migrations.create_employees import create_employees_tables
        migrate_salon_settings()  # <- –ó–∞–ø—É—Å—Ç–∏—Ç—å –ü–ï–†–í–´–ú
        # migrate_services()
        # migrate_settings()
        # create_employees_tables()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = get_bot()
        log_info(f"ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {bot.salon['name']}", "startup")
        
        log_info("‚úÖ CRM –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!", "startup")
        log_info("üîÑ –ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", "startup")  # ‚úÖ –ù–û–í–û–ï
        log_info("=" * 70, "startup")
    except Exception as e:
        log_critical(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {e}", "startup")
        raise


if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_level="info"
    )

    