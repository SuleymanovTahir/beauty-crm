"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤ Instagram - –° –ü–û–î–î–ï–†–ñ–ö–û–ô –ü–†–û–ö–°–ò –î–õ–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
"""
from fastapi import APIRouter, Request
from fastapi.responses import JSONResponse
import json
import traceback
import httpx
from datetime import datetime
import urllib.parse

from config import VERIFY_TOKEN, PAGE_ACCESS_TOKEN, INSTAGRAM_BUSINESS_ID, DATABASE_NAME
import sqlite3
from db import (
    get_or_create_client, save_message, get_chat_history,
    detect_and_save_language, get_client_language, update_client_info
)
from bot import get_bot
from integrations import send_message, send_typing_indicator
from logger import logger, log_info, log_warning, log_error

router = APIRouter(tags=["Webhooks"])


async def fetch_username_from_api(user_id: str) -> tuple:
    """–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å username –∏–∑ Instagram API"""
    try:
        url = f"https://graph.facebook.com/v18.0/{user_id}"
        params = {
            "fields": "username,name,profile_pic",
            "access_token": PAGE_ACCESS_TOKEN,
        }
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url, params=params)
            
            if response.status_code == 200:
                data = response.json()
                username = data.get("username", "")
                name = data.get("name", "")
                profile_pic = data.get("profile_pic", "")
                
                log_info(f"‚úÖ API data: username={username}, name={name}, has_pic={bool(profile_pic)}", "webhook")
                return username, name, profile_pic
            else:
                log_warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª {response.status_code}: {response.text}", "webhook")
                return "", "", ""
                
    except httpx.TimeoutException:
        log_error(f"‚è±Ô∏è Timeout –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Instagram API –¥–ª—è {user_id}", "webhook")
        return "", "", ""
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username: {e}", "webhook", exc_info=True)
        return "", "", ""


async def extract_username_from_webhook(messaging_event: dict) -> str:
    """–ò–∑–≤–ª–µ—á—å username –∏–∑ webhook payload"""
    try:
        sender = messaging_event.get("sender", {})
        
        if "username" in sender:
            return sender["username"]
        
        if "user_ref" in sender:
            return sender["user_ref"]
            
        message = messaging_event.get("message", {})
        if "metadata" in message and "username" in message["metadata"]:
            return message["metadata"]["username"]
            
    except Exception as e:
        log_error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è username –∏–∑ webhook: {e}", "webhook")
    
    return ""


@router.get("/webhook")
async def verify_webhook(request: Request):
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è webhook –æ—Ç Meta"""
    try:
        mode = request.query_params.get("hub.mode")
        token = request.query_params.get("hub.verify_token")
        challenge = request.query_params.get("hub.challenge")
        
        log_info("=" * 70, "webhook")
        log_info("üîç –í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø WEBHOOK", "webhook")
        log_info(f"Mode: {mode}", "webhook")
        log_info(f"Token: {token}", "webhook")
        log_info(f"Challenge: {challenge}", "webhook")
        log_info("=" * 70, "webhook")
        
        if mode == "subscribe" and token == VERIFY_TOKEN:
            log_info("‚úÖ Webhook –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω!", "webhook")
            return int(challenge)
        
        log_warning("‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ webhook", "webhook")
        return JSONResponse({"error": "Verification failed"}, status_code=403)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ verify_webhook: {e}", "webhook")
        raise


async def get_instagram_scoped_id(sender_id: str) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å Instagram-Scoped ID (IGSID) –∏–∑ App-Scoped ID (ASID)
    
    Instagram –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–∞–∑–Ω—ã–µ ID –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    - ASID (17841448618072548) - —á–µ—Ä–µ–∑ Messenger Platform
    - IGSID - —á–µ—Ä–µ–∑ Instagram Graph API
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π IGSID
    """
    try:
        url = f"https://graph.facebook.com/v18.0/{sender_id}"
        params = {
            "fields": "id,username",
            "access_token": PAGE_ACCESS_TOKEN,
        }
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url, params=params)
            
            if response.status_code == 200:
                data = response.json()
                instagram_id = data.get("id")
                
                if instagram_id and instagram_id != sender_id:
                    log_info(f"üîÑ Converted ASID {sender_id} ‚Üí IGSID {instagram_id}", "webhook")
                    return instagram_id
                    
    except Exception as e:
        log_warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IGSID: {e}", "webhook")
    
    return sender_id  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID


@router.post("/webhook")
async def handle_webhook(request: Request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Instagram"""
    try:
        logger.info("=" * 70)
        logger.info("üì® WEBHOOK: POST request received")
        
        body_bytes = await request.body()
        body_str = body_bytes.decode('utf-8')
        
        data = json.loads(body_str)
        
        if data.get("object") != "instagram":
            logger.warning(f"‚ö†Ô∏è Not Instagram: {data.get('object')}")
            return {"status": "ok"}
        
        logger.info(f"üì¶ Full webhook payload: {json.dumps(data, indent=2)[:500]}...")
        
        bot = get_bot()
        
        for entry in data.get("entry", []):
            for messaging in entry.get("messaging", []):
                sender_id = messaging.get("sender", {}).get("id")
                sender_id = await get_instagram_scoped_id(sender_id)
                logger.info(f"üì® Processing messaging event: {json.dumps(messaging, indent=2)[:300]}...")                
                if not sender_id or "message" not in messaging:
                    continue
                
                message_data = messaging["message"]
                
                # ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: is_echo=True –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ –≠–¢–û –ú–´ –û–¢–ü–†–ê–í–ò–õ–ò
                is_echo = message_data.get("is_echo", False)
                message_text = message_data.get("text", "").strip()

                logger.info(f"üì¨ Message from {sender_id}: is_echo={is_echo}, text={message_text[:50]}")

                if is_echo:
                    import sqlite3
                    from config import DATABASE_NAME

                    # ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º sender_id
                    # –ï—Å–ª–∏ sender_id = –Ω–∞—à –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç (17841448618072548), —Ç–æ —ç—Ç–æ –ù–ê–®–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
                    # –ï—Å–ª–∏ sender_id = ID –∫–ª–∏–µ–Ω—Ç–∞, —Ç–æ —ç—Ç–æ —ç—Ö–æ –ò–ó CRM API

                    if sender_id == "17841448618072548":
                        # ‚úÖ –≠—Ç–æ –ú–ï–ù–ï–î–ñ–ï–† –Ω–∞–ø–∏—Å–∞–ª –∏–∑ Instagram Direct
                        logger.info(f"üì® Manager sent via Instagram Direct to {messaging['recipient']['id']}")

                        # –ü–æ–ª—É—á–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ recipient
                        client_id = messaging.get("recipient", {}).get("id")

                        if not client_id:
                            logger.warning(f"‚ö†Ô∏è Cannot determine client_id from echo message")
                            continue
                        
                        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –¢–ï–ö–°–¢ –µ—Å–ª–∏ –µ—Å—Ç—å
                        if message_text:
                            save_message(client_id, message_text, "manager", message_type="text")
                            logger.info(f"üíæ Manager message saved: {message_text[:50]}")

                        # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –§–ê–ô–õ–´ –µ—Å–ª–∏ –µ—Å—Ç—å
                        attachments = message_data.get("attachments", [])
                        if attachments:
                            for attachment in attachments:
                                attachment_type = attachment.get("type")
                                payload = attachment.get("payload", {})
                                file_url = payload.get("url")

                                if attachment_type == "image":
                                    save_message(client_id, file_url, "manager", message_type=attachment_type)
                                else:
                                    save_message(client_id, file_url, "manager", message_type=attachment_type)

                        continue
                    else:
                        # ‚úÖ –≠—Ç–æ —ç—Ö–æ –æ—Ç –ë–û–¢–ê –∏–∑ CRM API - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        logger.info(f"‚è≠Ô∏è Skipping echo from CRM API")
                        continue

                
                # ‚úÖ 4. –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –ö–õ–ò–ï–ù–¢–ê
                if not message_text:
                    log_info(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", "webhook")
                    continue
                
                log_info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ {sender_id}: {message_text[:50]}", "webhook")
                
                try:
                    # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú USERNAME –ò PROFILE_PIC
                    username = ""
                    name = ""
                    profile_pic = ""
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ webhook
                    username = await extract_username_from_webhook(messaging)
                    
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ API
                    if not username:
                        # –°—Ç–∞–ª–æ:
                        try:
                            url = f"https://graph.facebook.com/v18.0/{sender_id}"
                            params = {
                                "fields": "username,name,profile_pic",  # ‚úÖ –î–û–ë–ê–í–ò–õ–ò profile_pic
                                "access_token": PAGE_ACCESS_TOKEN,
                            }

                            async with httpx.AsyncClient(timeout=10.0) as client:
                                response = await client.get(url, params=params)

                                if response.status_code == 200:
                                    data_api = response.json()
                                    username = data_api.get("username", "")
                                    name = data_api.get("name", "")
                                    profile_pic = data_api.get("profile_pic", "")  # ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ê–í–ê–¢–ê–†

                                    log_info(f"‚úÖ API data: username={username}, name={name}, has_pic={bool(profile_pic)}", "webhook")
                                else:
                                    log_warning(f"‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª {response.status_code}: {response.text}", "webhook")
                        except Exception as api_err:
                            log_error(f"‚ùå API fetch error: {api_err}", "webhook", exc_info=True)
                    
                    if not username:
                        username = f"user_{sender_id[:8]}"
                        log_warning(f"‚ö†Ô∏è Username –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {sender_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback", "webhook")
                    
                    log_info(f"üë§ Username: {username}", "webhook")
                    
                    # ‚úÖ –°–û–ó–î–ê–Å–ú/–û–ë–ù–û–í–õ–Ø–ï–ú –ö–õ–ò–ï–ù–¢–ê
                    get_or_create_client(sender_id, username=username)
                    
                    # ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ò–ú–Ø (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    # –°—Ç–∞–ª–æ:
                    if name or profile_pic:
                        update_client_info(sender_id, name=name, profile_pic=profile_pic if profile_pic else None)
                    
                    # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï
                    save_message(
                        sender_id, 
                        message_text, 
                        "client",
                        message_type="text"
                    )
                    log_info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {message_text[:30]}...", "webhook")
                    
                    # ‚úÖ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –Ø–ó–´–ö
                    detect_and_save_language(sender_id, message_text)
                    client_language = get_client_language(sender_id)
                    
                    await send_typing_indicator(sender_id)
                    
                    history = get_chat_history(sender_id, limit=10)
                    
                    logger.info("ü§ñ Generating AI response...")
                    try:
                        ai_response = await bot.generate_response(
                            user_message=message_text,
                            instagram_id=sender_id,
                            history=history,
                            client_language=client_language
                        )
                        logger.info(f"‚úÖ AI response: {ai_response[:100]}")
                    except Exception as gen_error:
                        logger.error(f"‚ùå AI generation failed: {gen_error}")
                        logger.error(f"üìã Error type: {type(gen_error).__name__}")
                        import traceback
                        logger.error(f"üìã Traceback:\n{traceback.format_exc()}")
                        
                        # –í–µ—Ä–Ω–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                        ai_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç! üíé"
                    
                    save_message(
                        sender_id, 
                        ai_response, 
                        "bot",
                        message_type="text"
                    )
                    await send_message(sender_id, ai_response)
                    
                    logger.info("üì§ Message sent!")
                    
                except Exception as e:
                    logger.error(f"‚ùå Processing error: {e}")
                    logger.error(traceback.format_exc())
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error("=" * 70)
        logger.error(f"‚ùå CRITICAL ERROR: {e}")
        logger.error(traceback.format_exc())
        return {"status": "ok"}
    

@router.get("/webhook/test")
async def test_webhook():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≤–µ–±—Ö—É–∫–∞"""
    return {
        "status": "ok",
        "message": "Webhook is working",
        "verify_token": VERIFY_TOKEN[:5] + "...",
        "instagram_business_id": INSTAGRAM_BUSINESS_ID,
        "timestamp": datetime.now().isoformat()
    }