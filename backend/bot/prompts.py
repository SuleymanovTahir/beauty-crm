# backend/bot/prompts.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ - –≤—Å—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è system prompt
"""
from typing import Dict, List, Tuple
from datetime import datetime

from db import (
    get_all_services,
    get_all_special_packages,
    find_special_package_by_keywords
)

class PromptBuilder:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è AI-–±–æ—Ç–∞"""
    
    def __init__(self, salon: Dict, bot_settings: Dict):
        """
        Args:
            salon: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–ª–æ–Ω–∞ –∏–∑ –ë–î
            bot_settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –ë–î
        """
        self.salon = salon
        self.bot_settings = bot_settings
    
    def build_full_prompt(
        self,
        instagram_id: str,
        history: List[Tuple],
        booking_progress: Dict = None,
        client_language: str = 'ru'
    ) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª–Ω—ã–π system prompt
        
        Returns:
            str: –ì–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        """
        parts = [
            self._build_identity(),
            self._build_personality(),
            self._build_language_settings(client_language),
            self._build_greeting_logic(history),
            self._build_voice_handling(),
            self._build_special_packages(),
            self._build_pricing_strategy(),
            self._build_booking_rules(),
            self._build_salon_info(),
            self._build_services_list(),
            self._build_history(history),
            self._build_booking_progress(booking_progress),
            self._build_algorithm(),
            self._build_examples(),
            self._build_dont_do(),
        ]
        
        return "\n\n".join([p for p in parts if p])
    
    def _build_identity(self) -> str:
        """–°–µ–∫—Ü–∏—è IDENTITY"""
        return f"""=== IDENTITY ===
–¢—ã ‚Äî {self.bot_settings['bot_name']}, AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —ç–ª–∏—Ç–Ω–æ–≥–æ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã "{self.salon['name']}" –≤ Dubai.

–¢–í–û–Ø –ú–ò–°–°–ò–Ø:
–ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —É—Å–ª—É–≥–∞–º, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö –∏ –ù–ê–ü–†–ê–í–õ–Ø–¢–¨ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å —á–µ—Ä–µ–∑ YClients!"""
    
    def _build_personality(self) -> str:
        """–°–µ–∫—Ü–∏—è PERSONALITY"""
        return f"""=== PERSONALITY ===
{self.bot_settings['personality_traits']}

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
{self.bot_settings['communication_style']}

- –ú–∞–∫—Å–∏–º—É–º {self.bot_settings['max_message_length']} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –≠–º–æ–¥–∑–∏: {self.bot_settings['emoji_usage']}"""
    
    def _build_language_settings(self, language: str) -> str:
        """–Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        lang_map = {
            'ru': "–Ø–ó–´–ö: –†—É—Å—Å–∫–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π) - –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏",
            'en': "–Ø–ó–´–ö: English - respond in English", 
            'ar': "–Ø–ó–´–ö: ÿßŸÑÿπÿ±ÿ®Ÿäÿ© - ÿßŸÑÿ±ÿØ ÿ®ÿßŸÑÿπÿ±ÿ®Ÿäÿ©"
        }
        
        lang_instruction = lang_map.get(language, lang_map['ru'])
        supported = self.bot_settings.get('languages_supported', 'ru,en,ar')
        
        return f"""=== LANGUAGE ===
{lang_instruction}

–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {supported}
‚ö†Ô∏è –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º –∂–µ —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–ª –∫–ª–∏–µ–Ω—Ç!"""
    
    def _build_greeting_logic(self, history: List[Tuple]) -> str:
        """–õ–æ–≥–∏–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π"""
        should_greet = self._should_greet(history)
        
        if should_greet:
            return f"""=== GREETING (–ü–ï–†–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï) ===
–ö–ª–∏–µ–Ω—Ç –Ω–∞–ø–∏—Å–∞–ª –≤–ø–µ—Ä–≤—ã–µ –∏–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:
- –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π: "{self.bot_settings['greeting_message']}"
- –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–º–æ—â—å: "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
- –ï—Å–ª–∏ —É—Ç—Ä–æ/–¥–µ–Ω—å - "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ/–¥–µ–Ω—å!", –µ—Å–ª–∏ –≤–µ—á–µ—Ä - "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!"

‚ö†Ô∏è –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!"""
        else:
            return """=== –ü–†–û–î–û–õ–ñ–ï–ù–ò–ï –î–ò–ê–õ–û–ì–ê ===
- –ù–ï –∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å–Ω–æ–≤–∞ - –≤—ã —É–∂–µ –æ–±—â–∞–µ—Ç–µ—Å—å!
- –û—Ç–≤–µ—á–∞–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
- –ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π –∏ –ø–æ –¥–µ–ª—É (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"""
    
    def _should_greet(self, history: List[Tuple]) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"""
        if len(history) <= 1:
            return True
        
        # –õ–æ–≥–∏–∫–∞ –∏–∑ core.py
        # ... (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –≤ SalonBot.should_greet)
        return False
    
    def _build_voice_handling(self) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        voice_response = self.bot_settings.get(
            'voice_message_response',
            '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è AI-–ø–æ–º–æ—â–Ω–∏–∫ –∏ –Ω–µ –º–æ–≥—É –ø—Ä–æ—Å–ª—É—à–∏–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ üòä'
        )
        return f"""=== –ì–û–õ–û–°–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
        –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Å–∫–∞–∂–∏ –≤–µ—Å–µ–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ:
        "{voice_response}
        ‚ö†Ô∏è –ù–ï –≥–æ–≤–æ—Ä–∏ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è" ‚Äî –¢–´ –∏ –µ—Å—Ç—å –≥–ª–∞–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!"""
    
    def _build_special_packages(self) -> str:
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã"""
        packages = get_all_special_packages(active_only=True)
        
        if not packages:
            return ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã —Å–∫–∏–¥–æ–∫
        auto_cancel = self.bot_settings.get('auto_cancel_discounts', '')
        
        packages_text = "=== –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–ê–ö–ï–¢–´ ===\n\n"
        
        if auto_cancel:
            packages_text += f"‚ö†Ô∏è –ü–†–ê–í–ò–õ–û –ü–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Æ –°–ö–ò–î–û–ö:\n{auto_cancel}\n\n"
        
        for pkg in packages:
            pkg_name = pkg[2]  # name_ru
            orig_price = pkg[5]
            special_price = pkg[6]
            currency = pkg[7]
            discount = pkg[8]
            desc = pkg[4] or ""
            keywords = pkg[11]
            
            packages_text += f"""üî• {pkg_name}
  –û–±—ã—á–Ω–∞—è —Ü–µ–Ω–∞: {orig_price} {currency}
  –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {special_price} {currency} (—Å–∫–∏–¥–∫–∞ {discount}%!)
  –û–ø–∏—Å–∞–Ω–∏–µ: {desc}
  –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {keywords}
  ‚ö†Ô∏è –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–ø–æ–º–∏–Ω–∞–µ—Ç —ç—Ç–∏ —Å–ª–æ–≤–∞ - –ø—Ä–µ–¥–ª–æ–∂–∏ –≠–¢–û–¢ –ø–∞–∫–µ—Ç!

"""
        
        return packages_text
    
    def _build_pricing_strategy(self) -> str:
        """–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏"""
        return f"""=== PRICING STRATEGY ===
{self.bot_settings['price_explanation']}

–®–ê–ë–õ–û–ù –û–¢–í–ï–¢–ê:
{self.bot_settings['price_response_template']}

–û–ë–û–°–ù–û–í–ê–ù–ò–ï –ü–†–ï–ú–ò–£–ú-–¶–ï–ù:
{self.bot_settings['premium_justification']}

FOMO:
{self.bot_settings['fomo_messages']}

UPSELL:
{self.bot_settings['upsell_techniques']}"""
    
    def _build_booking_rules(self) -> str:
        """–ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–∏—Å–∏"""
        return f"""=== BOOKING RULES ===
‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –¢–´ –ù–ï –ú–û–ñ–ï–®–¨ –ó–ê–ü–ò–°–´–í–ê–¢–¨!

–ö–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è:
"{self.bot_settings['booking_redirect_message']}"

Booking URL: {self.salon['booking_url']}

- –ù–ò–ö–û–ì–î–ê –Ω–µ —Å–æ–±–∏—Ä–∞–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
- –ù–ï –Ω–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã/–≤—Ä–µ–º—è - —Ç—ã –∏—Ö –ù–ï –ó–ù–ê–ï–®–¨!"""
    
    def _build_salon_info(self) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∞–ª–æ–Ω–µ"""
        return f"""=== SALON INFO ===
–ù–∞–∑–≤–∞–Ω–∏–µ: {self.salon['name']}
–ê–¥—Ä–µ—Å: {self.salon['address']}
–ß–∞—Å—ã: {self.salon['hours']}
–¢–µ–ª–µ—Ñ–æ–Ω: {self.salon['phone']}
Google Maps: {self.salon['google_maps']}
–û–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å: {self.salon['booking_url']}"""
    
    def _build_services_list(self) -> str:
        """–°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥"""
        services = get_all_services(active_only=True)
        
        services_by_category = {}
        for service in services:
            category = service[7]
            if category not in services_by_category:
                services_by_category[category] = []
            
            services_by_category[category].append({
                'name': service[2],
                'name_ru': service[3] or service[2],
                'price': f"{service[5]} {service[6]}",
                'description': service[9] or ''
            })
        
        services_text = "=== –£–°–õ–£–ì–ò –°–ê–õ–û–ù–ê ===\n\n"
        for category, services_list in services_by_category.items():
            services_text += f"üìÇ {category}:\n"
            for service in services_list:
                services_text += f"‚Ä¢ {service['name_ru']} - {service['price']}\n"
                if service['description']:
                    services_text += f"  ‚îî {service['description']}\n"
            services_text += "\n"
        
        return services_text
    
    def _build_history(self, history: List[Tuple]) -> str:
        """–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å 5 —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏"""
        if not history:
            return ""
        
        history_text = "üí¨ –ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):\n"
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ 4, —Ç–∞–∫ –∏ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for item in history[-5:]:
            # –ï—Å–ª–∏ 5 —ç–ª–µ–º–µ–Ω—Ç–æ–≤: (msg, sender, timestamp, msg_type, id)
            # –ï—Å–ª–∏ 4 —ç–ª–µ–º–µ–Ω—Ç–∞: (msg, sender, timestamp, msg_type)
            if len(item) >= 5:
                msg, sender, timestamp, msg_type, msg_id = item
            else:
                msg, sender, timestamp, msg_type = item
            
            role = "–ö–ª–∏–µ–Ω—Ç" if sender == "client" else "–¢—ã"
            if msg_type == 'voice':
                history_text += f"{role}: [–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
            else:
                history_text += f"{role}: {msg}\n"
        
        return history_text
    
    def _build_booking_progress(self, progress: Dict) -> str:
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∏ (deprecated)"""
        if not progress:
            return ""
        
        return f"""üìù –ü–†–û–ì–†–ï–°–° –ó–ê–ü–ò–°–ò:
–£—Å–ª—É–≥–∞: {progress.get('service_name', '‚ùå')}
–î–∞—Ç–∞: {progress.get('date', '‚ùå')}
–í—Ä–µ–º—è: {progress.get('time', '‚ùå')}
–¢–µ–ª–µ—Ñ–æ–Ω: {progress.get('phone', '‚ùå')}"""
    
    def _build_algorithm(self) -> str:
        """–ê–ª–≥–æ—Ä–∏—Ç–º –¥–µ–π—Å—Ç–≤–∏–π"""
        return f"""‚ö° –ê–õ–ì–û–†–ò–¢–ú –î–ï–ô–°–¢–í–ò–ô:
{self.bot_settings['algorithm_actions']}"""
    
    def _build_examples(self) -> str:
        """–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        examples = self.bot_settings.get('example_good_responses', '')
        if not examples:
            return ""
        
        return f"""üí° –ü–†–ò–ú–ï–†–´ –•–û–†–û–®–ò–• –û–¢–í–ï–¢–û–í:
{examples}"""
    
    def _build_dont_do(self) -> str:
        """–ß—Ç–æ –ù–ï –¥–µ–ª–∞—Ç—å"""
        anti_patterns = self.bot_settings.get('anti_patterns', '')
        if not anti_patterns:
            return """üö´ –ù–ï –î–ï–õ–ê–ô:
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
- –ù–ï –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
- –ù–ï —Å–æ–±–∏—Ä–∞–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
- –ù–ï –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ü–µ–Ω—ã"""
        
        return f"""üö´ –ù–ï –î–ï–õ–ê–ô:
{anti_patterns}"""