# backend/bot/core.py
"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏–∑ ai_bot.py –∏ bot.py
"""
import google.generativeai as genai
import httpx
import os
from typing import Dict, Optional, List, Tuple
from datetime import datetime, timedelta

from config import GEMINI_API_KEY
from db import (
    get_salon_settings, 
    get_bot_settings,
    get_all_services,
    find_special_package_by_keywords,
    get_all_special_packages
)


class SalonBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å AI-–±–æ—Ç–∞ –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã
    
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
    - –ó–∞–≥—Ä—É–∑–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î
    - –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
    - –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini (—Å –ø—Ä–æ–∫—Å–∏)
    - –û–±—Ä–∞–±–æ—Ç–∫—É –ª–æ–≥–∏–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
        self.reload_settings()
        
        # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self.proxy_url = os.getenv("PROXY_URL")
        
        if self.proxy_url:
            print(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {self.proxy_url.split('@')[1] if '@' in self.proxy_url else self.proxy_url[:30]}...")
        else:
            print("‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –≤–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ!")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Gemini (–¥–ª—è fallback –±–µ–∑ –ø—Ä–æ–∫—Å–∏)
        genai.configure(api_key=GEMINI_API_KEY)
        self.model = genai.GenerativeModel('gemini-2.0-flash-exp')
        
        print("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Gemini —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏)")
    
    def reload_settings(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
        self.salon = get_salon_settings()
        self.bot_settings = get_bot_settings()
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.salon['name']}")
    
    def build_system_prompt(
        self, 
        instagram_id: str, 
        history: List[Tuple], 
        booking_progress: Dict = None, 
        client_language: str = 'ru'
    ) -> str:
        """
        –ü–æ—Å—Ç—Ä–æ–∏—Ç—å system prompt –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
        
        Args:
            instagram_id: ID –∫–ª–∏–µ–Ω—Ç–∞ –≤ Instagram
            history: –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            booking_progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∏ (deprecated)
            client_language: –Ø–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞ (ru/en/ar)
        
        Returns:
            str: –ü–æ–ª–Ω—ã–π system prompt –¥–ª—è Gemini
        """
        from .prompts import PromptBuilder
        
        builder = PromptBuilder(
            salon=self.salon,
            bot_settings=self.bot_settings
        )
        
        return builder.build_full_prompt(
            instagram_id=instagram_id,
            history=history,
            booking_progress=booking_progress,
            client_language=client_language
        )
    
    async def generate_response(
        self, 
        user_message: str, 
        instagram_id: str,
        history: List[Tuple] = None,
        booking_progress: Dict = None,
        client_language: str = 'ru'
    ) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è Gemini —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            instagram_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            history: –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞
            booking_progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–∏—Å–∏
            client_language: –Ø–∑—ã–∫ –∫–ª–∏–µ–Ω—Ç–∞
        
        Returns:
            str: –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        """
        # –ü–æ—Å—Ç—Ä–æ–∏—Ç—å system prompt
        system_prompt = self.build_system_prompt(
            instagram_id=instagram_id,
            history=history or [],
            booking_progress=booking_progress,
            client_language=client_language
        )
        
        # –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        full_prompt = f"{system_prompt}\n\nUser: {user_message}\nAssistant:"
        
        try:
            print("=" * 50)
            print("ü§ñ Generating AI response (Gemini via proxy)...")
            print(f"üìù User message: {user_message[:100]}")
            print(f"üë§ Instagram ID: {instagram_id}")
            print(f"üåê Language: {client_language}")
            print(f"üìä History length: {len(history) if history else 0}")
            
            # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            if self.proxy_url:
                ai_response = await self._generate_via_proxy(full_prompt)
            else:
                # Fallback –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ)
                response = self.model.generate_content(full_prompt)
                ai_response = response.text.strip()
            
            print(f"‚úÖ AI response generated: {ai_response[:100]}")
            print("=" * 50)
            
            return ai_response
            
        except Exception as e:
            print("=" * 50)
            print(f"‚ùå Gemini API Error: {e}")
            print(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            import traceback
            print(f"üìã –ü–æ–ª–Ω—ã–π traceback:\n{traceback.format_exc()}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if "API_KEY" in str(e).upper():
                print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π GEMINI_API_KEY")
            elif "QUOTA" in str(e).upper() or "LIMIT" in str(e).upper():
                print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Gemini API")
            elif "SAFETY" in str(e).upper():
                print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            elif "location" in str(e).lower():
                print("‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∫—Å–∏!")
            
            print("=" * 50)
            
            return self._get_fallback_response(client_language)
    
    async def _generate_via_proxy(self, prompt: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Gemini REST API —Å –ø—Ä–æ–∫—Å–∏
        
        Args:
            prompt: –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            
        Returns:
            str: –û—Ç–≤–µ—Ç –æ—Ç Gemini
        """
        url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent?key={GEMINI_API_KEY}"
        
        payload = {
            "contents": [{
                "parts": [{"text": prompt}]
            }],
            "generationConfig": {
                "temperature": 0.7,
                "maxOutputTokens": 500,
            }
        }
        
        # ‚úÖ HTTP –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–æ–∫—Å–∏
        async with httpx.AsyncClient(
            proxies=self.proxy_url,
            timeout=60.0,  # –£–≤–µ–ª–∏—á–µ–Ω timeout –¥–ª—è –ø—Ä–æ–∫—Å–∏
            follow_redirects=True
        ) as client:
            response = await client.post(url, json=payload)
            response.raise_for_status()
            
            data = response.json()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if "candidates" in data and len(data["candidates"]) > 0:
                candidate = data["candidates"][0]
                if "content" in candidate and "parts" in candidate["content"]:
                    parts = candidate["content"]["parts"]
                    if len(parts) > 0 and "text" in parts[0]:
                        return parts[0]["text"].strip()
            
            # –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è
            raise Exception(f"Unexpected Gemini response structure: {data}")
    
    def _get_fallback_response(self, language: str = 'ru') -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        responses = {
            'ru': "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑! üòä",
            'en': "Sorry, something went wrong. Let's try again! üòä",
            'ar': "ÿπÿ∞ÿ±ÿßŸãÿå ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ŸÖÿß. ÿØÿπŸàŸÜÿß ŸÜÿ≠ÿßŸàŸÑ ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ! üòä"
        }
        return responses.get(language, responses['ru'])
    
    def should_greet(self, history: List[Tuple]) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
        """
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(history) <= 1:
            return True
        
        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ (>6 —á–∞—Å–æ–≤ + –Ω–æ–≤—ã–π –¥–µ–ª–æ–≤–æ–π –¥–µ–Ω—å)
        if len(history) > 0:
            try:
                last_msg = history[-1]
                last_timestamp = datetime.fromisoformat(last_msg[2])
                now = datetime.now()
                time_diff = now - last_timestamp
                
                if time_diff > timedelta(hours=6):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É "–¥–µ–ª–æ–≤–æ–≥–æ –¥–Ω—è" (08:00 - —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
                    last_business_day = (
                        last_timestamp.date() 
                        if last_timestamp.hour >= 8 
                        else (last_timestamp - timedelta(days=1)).date()
                    )
                    current_business_day = (
                        now.date() 
                        if now.hour >= 8 
                        else (now - timedelta(days=1)).date()
                    )
                    
                    return current_business_day > last_business_day
            except:
                pass
        
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
_bot_instance = None

def get_bot() -> SalonBot:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (singleton)"""
    global _bot_instance
    if _bot_instance is None:
        _bot_instance = SalonBot()
    return _bot_instance