# backend/integrations/gemini.py
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Gemini AI
"""
import google.generativeai as genai
from config import GEMINI_API_KEY

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º Gemini
genai.configure(api_key=GEMINI_API_KEY)


async def ask_gemini(prompt: str, context: str = "") -> str:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Gemini AI
    
    Args:
        prompt: –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç
        context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    
    Returns:
        str: –û—Ç–≤–µ—Ç –æ—Ç AI –∏–ª–∏ fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    model = genai.GenerativeModel('gemini-2.0-flash-exp')
    full_prompt = f"{context}\n\n{prompt}" if context else prompt
    
    try:
        response = model.generate_content(full_prompt)
        return response.text.strip()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Gemini: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑! üòä"