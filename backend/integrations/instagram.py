
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Instagram Graph API
"""
import httpx
from config import PAGE_ACCESS_TOKEN
from logger import log_error,log_info


async def send_message(recipient_id: str, message: str) -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Instagram
    
    Args:
        recipient_id: Instagram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Returns:
        dict: –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ {"error": ...}
    """
    url = "https://graph.facebook.com/v18.0/me/messages"
    
    params = {"access_token": PAGE_ACCESS_TOKEN}
    
    data = {
        "recipient": {"id": recipient_id},
        "message": {"text": message}
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            response = await client.post(url, params=params, json=data)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Instagram: {e}")
            return {"error": str(e)}



async def send_file(recipient_id: str, file_url: str, file_type: str = "image") -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –≤ Instagram
    
    Args:
        recipient_id: Instagram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        file_url: URL —Ñ–∞–π–ª–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—É–±–ª–∏—á–Ω—ã–π HTTPS –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        file_type: –¢–∏–ø —Ñ–∞–π–ª–∞ ("image", "file", "audio", "video")
    
    Returns:
        dict: –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ {"error": ...}
    """
    url = "https://graph.facebook.com/v18.0/me/messages"
    
    params = {"access_token": PAGE_ACCESS_TOKEN}
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Instagram API —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–≥–∏–π —Ñ–æ—Ä–º–∞—Ç
    if file_type == "image":
        attachment = {
            "type": "image",
            "payload": {
                "url": file_url,
                "is_reusable": False  # ‚úÖ –í–ê–ñ–ù–û: False –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
            }
        }
    elif file_type == "video":
        attachment = {
            "type": "video",
            "payload": {
                "url": file_url,
                "is_reusable": False
            }
        }
    elif file_type == "audio":
        attachment = {
            "type": "audio",
            "payload": {
                "url": file_url,
                "is_reusable": False
            }
        }
    elif file_type == "file":
        attachment = {
            "type": "file",
            "payload": {
                "url": file_url,
                "is_reusable": False
            }
        }
    else:
        return {"error": f"Unsupported file type: {file_type}"}
    
    data = {
        "recipient": {"id": recipient_id},
        "message": {"attachment": attachment}
    }
    
    async with httpx.AsyncClient(timeout=120.0) as client:  # ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω timeout –¥–æ 120 —Å–µ–∫—É–Ω–¥
        try:
            log_info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ ({file_type}): {file_url[:80]}...", "instagram")
            log_info(f"üì¶ Payload: {data}", "instagram")  # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º payload
            
            response = await client.post(url, params=params, json=data)
            
            # ‚úÖ –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
            if response.status_code != 200:
                error_text = response.text
                log_error(f"‚ùå Instagram API error {response.status_code}: {error_text}", "instagram")
                return {"error": f"HTTP {response.status_code}: {error_text}"}
            
            log_info(f"‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", "instagram")
            return response.json()
            
        except httpx.HTTPStatusError as e:
            error_msg = f"HTTP {e.response.status_code}: {e.response.text}"
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {error_msg}", "instagram")
            return {"error": error_msg}
        except httpx.TimeoutException:
            log_error(f"‚è±Ô∏è Timeout –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ (120 —Å–µ–∫—É–Ω–¥)", "instagram")
            return {"error": "Timeout: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ 120 —Å–µ–∫—É–Ω–¥"}
        except Exception as e:
            log_error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", "instagram", exc_info=True)
            return {"error": str(e)}


async def send_typing_indicator(recipient_id: str) -> None:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    
    Args:
        recipient_id: Instagram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    """
    url = "https://graph.facebook.com/v18.0/me/messages"
    
    params = {"access_token": PAGE_ACCESS_TOKEN}
    
    data = {
        "recipient": {"id": recipient_id},
        "sender_action": "typing_on"
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            await client.post(url, params=params, json=data)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å typing: {e}")


async def mark_as_seen(recipient_id: str) -> None:
    """
    –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    
    Args:
        recipient_id: Instagram ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    """
    url = "https://graph.facebook.com/v18.0/me/messages"
    
    params = {"access_token": PAGE_ACCESS_TOKEN}
    
    data = {
        "recipient": {"id": recipient_id},
        "sender_action": "mark_seen"
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            await client.post(url, params=params, json=data)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ: {e}")

# ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏
async def send_reaction(recipient_id: str, message_id: str, reaction: str = "‚ù§Ô∏è") -> dict:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    Args:
        recipient_id: Instagram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏
        reaction: –≠–º–æ–¥–∑–∏ —Ä–µ–∞–∫—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚ù§Ô∏è)
    
    Returns:
        dict: –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ {"error": ...}
    """
    url = "https://graph.facebook.com/v18.0/me/messages"
    
    params = {"access_token": PAGE_ACCESS_TOKEN}
    
    data = {
        "recipient": {"id": recipient_id},
        "sender_action": "react",
        "reaction": {
            "message_id": message_id,
            "reaction": reaction,
            "action": "react"  # –∏–ª–∏ "unreact" –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        }
    }
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            log_info(f"‚ù§Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ {reaction} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}", "instagram")
            response = await client.post(url, params=params, json=data)
            response.raise_for_status()
            
            log_info(f"‚úÖ –†–µ–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", "instagram")
            return response.json()
        except httpx.HTTPStatusError as e:
            error_msg = f"HTTP {e.response.status_code}: {e.response.text}"
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {error_msg}", "instagram")
            return {"error": error_msg}
        except Exception as e:
            log_error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏: {e}", "instagram")
            return {"error": str(e)}